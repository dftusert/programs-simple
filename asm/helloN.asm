; Для архитектуры x86_64, ОС GNU/Linux

; Трансляция в объектный файл: nasm -f elf64 helloN.asm
; Если необходимо добавить отладочные символы: nasm -g -f elf64 helloN.asm
; Линковка: ld helloN.o -o helloN.out

; Без дополнительной переменной-счетчика
section .text
    GLOBAL _start          ; Чтобы _start был 'виден'

_start:
    PUSH rbp               ; сохранение вершины стека
    XOR rax, rax           ; обнуляем rax, будет служить счетчиком

    MOV rbx, 1             ; STDOUT
    MOV rcx, message       ; Текст для вывода в консоль 
    MOV rdx, LEN           ; Длина этого текста   
    
    POP rbp                ; 'восстановление' вершины стека
    JMP _loop              ; Прыжок на метку _loop, начало цикла

_loop:
    PUSH rbp               ; сохранение вершины стека
    PUSH rax               ; Сохраняем значение счетчика в стеке
    
    MOV rax, 4             ; SYS_WRITE (номер системного вызова - 4)
    INT 0x80               ; Прерывание, выполнение вывода на консоль системой
    
    POP rax                ; Получаем сохраненное значение счетчика
    INC rax                ; И увеличиваем его на 1
    
    CMP rax, COUNTMAX      ; Сравнение счетчика с максимальным количеством итераций цикла
    JL _loop               ; Если значение счетчика меньше - прыгаем в начало цикла

    POP rbp                ; 'восстановление' вершины стека
    JMP _exit              ; Иначе переход по метке _exit для корректного завершения программы

_exit:
    MOV rax, 1             ; SYS_EXIT (номер системного вызова - 1)
    MOV rbx, 0             ; Код ошибки 0
    INT 0x80               ; Прерывание, выполнение завершения работы программы системой

section .data              ; .data - для 'инициализированных' переменных, .bss - для 'неинициализированных'
    message db 'Hello, World!', 0xa    ; Текст для вывода
    COUNTMAX equ 10                    ; Количество строк
    LEN equ $ - message                ; Длина текста